[{"name":"app.R","content":"# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Editable Spreadsheet with Forest Plot\"),\r\n  fluidRow(\r\n    # Left column: Buttons and Editable Table\r\n    column(6,  # Half the width\r\n           actionButton(\"save\", \"Save Changes\"),\r\n           actionButton(\"reset\", \"Reset Table\"),\r\n           actionButton(\"run_code\", \"Run Code\"),\r\n           br(), br(),\r\n           rHandsontableOutput(\"editableTable\")\r\n    ),\r\n    # Right column: Forest Plot Canvas\r\n    column(6,  # Half the width\r\n           h4(\"Forest Plot:\"),\r\n           plotOutput(\"resultCanvas\")  # Output area for the forest plot\r\n    )\r\n  )\r\n)\r\n\r\n# Define Server\r\nserver <- function(input, output, session) {\r\n  # Initialize dataset with predefined columns and 5 empty rows\r\n  initial_data <- data.frame(\r\n    Study = paste(\"Outcome\", 1:6),\r\n    Estimate = c(0.2, 0.5, 0.7, -0.3, -0.1, 0.4),\r\n    Lower_CI = c(0.1, 0.3, 0.5, -0.5, -0.3, 0.2),\r\n    Upper_CI = c(0.3, 0.7, 0.9, -0.1, 0.1, 0.6),\r\n    p_value = c(0.03, 0.01, 0.01, 0.04, 0.2, 0.04),\r\n    stringsAsFactors = FALSE\r\n  )\r\n  \r\n  # Reactive data storage\r\n  values <- reactiveValues(data = initial_data)\r\n  \r\n  # Render editable table\r\n  output$editableTable <- renderRHandsontable({\r\n    rhandsontable(values$data, rowHeaders = NULL)\r\n  })\r\n  \r\n  # Update data on table edit\r\n  observeEvent(input$editableTable, {\r\n    if (!is.null(input$editableTable)) {\r\n      values$data <- hot_to_r(input$editableTable)\r\n    }\r\n  })\r\n  \r\n  # Save data (you can replace `print` with file-saving logic)\r\n  observeEvent(input$save, {\r\n    print(\"Saving data:\")\r\n    print(values$data)\r\n    # Example: write.csv(values$data, \"output.csv\", row.names = FALSE)\r\n  })\r\n  \r\n  # Reset to initial table\r\n  observeEvent(input$reset, {\r\n    values$data <- initial_data\r\n  })\r\n  \r\n  # Display forest plot when \"Run Code\" is pressed\r\n  observeEvent(input$run_code, {\r\n    output$resultCanvas <- renderPlot({\r\n      # Prepare the plot dynamically using current table data\r\n      data <- values$data %>%\r\n        arrange(-Estimate) %>%\r\n        mutate(Study = factor(Study, levels = Study))  # Reorder Study factor levels\r\n      \r\n      # Define MetBrewer palette\r\n      met_palette <- met.brewer(\"Hokusai2\")\r\n      \r\n      # Calculate extra space for the X-axis dynamically\r\n      x_padding <- max(data$Upper_CI, na.rm = TRUE) * 0.3  # 30% extra space for annotations\r\n      x_limit <- c(min(data$Lower_CI, na.rm = TRUE), max(data$Upper_CI, na.rm = TRUE) + x_padding)\r\n      \r\n      # Generate the forest plot\r\n      plot <- ggplot(data, aes(x = Estimate, y = Study)) +\r\n        # Customized error bars\r\n        geom_errorbarh(\r\n          aes(xmin = Lower_CI, xmax = Upper_CI, color = Estimate),\r\n          height = 0.2,\r\n          size = 1\r\n        ) +\r\n        # Customized points\r\n        geom_point(\r\n          aes(fill = Estimate),\r\n          size = 4,\r\n          shape = 23,\r\n          color = \"black\",\r\n          stroke = 0.8\r\n        ) +\r\n        # Null hypothesis line\r\n        geom_vline(aes(xintercept = 0, linetype = \"Null hypothesis\"), \r\n                   color = met_palette[3], size = 1) +\r\n        # Gradient scale for points\r\n        scale_fill_gradientn(colors = met_palette, name = \"Effect Size\", guide = \"colorbar\") +\r\n        scale_color_gradientn(colors = met_palette, guide = \"none\") +\r\n        scale_linetype_manual(name = \"\", values = c(\"Null hypothesis\" = \"solid\")) +\r\n        # Add p_value annotations\r\n        geom_text(\r\n          aes(label = sprintf(\"p = %.2f\", p_value), x = max(Upper_CI) + x_padding / 4),\r\n          hjust = 0,\r\n          size = 4,\r\n          color = \"black\"\r\n        ) +\r\n        # Expand X-axis limits\r\n        scale_x_continuous(limits = x_limit, expand = c(0, 0)) +\r\n        # Custom theme\r\n        theme_minimal() +\r\n        theme(\r\n          plot.title = element_text(hjust = 0.5, size = 14),\r\n          axis.text.y = element_text(color = \"black\", size = 12),\r\n          axis.title.x = element_blank(),\r\n          axis.text.x = element_blank(),\r\n          axis.ticks.x = element_blank(),\r\n          legend.title = element_text(size = 10),\r\n          legend.text = element_text(size = 10),\r\n          legend.position = \"bottom\"\r\n        )\r\n      # Return the plot\r\n      print(plot)\r\n    })\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)","type":"text"}]
